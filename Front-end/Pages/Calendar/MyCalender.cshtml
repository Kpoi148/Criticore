@page
@model Front_end.Pages.Calendar.MyCalenderModel
@{
    ViewData["Title"] = "Lịch Deadline Bài Tập";
    Layout = "~/Pages/Shared/_Sidebar.cshtml"; // Sử dụng layout chung
}
<!-- Link CSS riêng cho calendar -->
<link rel="stylesheet" href="~/css/MyCalendar.css" asp-append-version="true" />
<!-- Nội dung chính, không cần <body> vì dùng Layout -->
<div class="h-full w-full">
    <!-- Wrapper để hỗ trợ height 100% -->
    <div id="calendar" class="h-full w-full"></div> <!-- Dùng class thay vì style inline để dễ quản lý -->
</div>
<!-- Scripts -->
@section Scripts {
    <script src="https://cdn.jsdelivr.net/npm/fullcalendar@6.1.15/index.global.min.js"></script>
    <script>
        document.addEventListener('DOMContentLoaded', function () {
            var calendarEl = document.getElementById('calendar');
            if (calendarEl) {
                var calendar = new FullCalendar.Calendar(calendarEl, {
                    initialView: 'dayGridMonth',
                    initialDate: '2025-01-01',
                    editable: false,
                    headerToolbar: {
                        left: 'prev,next today',
                        center: 'title',
                        right: 'timeGridWeek,dayGridMonth,multiMonthYear' // Thay đổi để có WEEK, MONTH, YEAR
                    },
                    buttonText: { // Tùy chỉnh nhãn nút để khớp hình ảnh (kết hợp CSS uppercase)
                        week: 'Week',
                        month: 'Month',
                        multiMonthYear: 'Year'
                    },
                    height: '100%', // Giữ để full height
                    contentHeight: 'auto', // Thêm để grid tự mở rộng, tránh collapse
                    events: async function (fetchInfo, successCallback, failureCallback) {
                        try {
                            const userId = @Model.UserId; // Lấy từ Model
                            const response = await fetch(`https://localhost:7154/api/users/${userId}/deadlines`, {
                            //await fetch(`https://homework.criticore.edu.vn:8007/api/users/${userId}/deadlines`,
                            method: 'GET',
                                mode: 'cors',
                                credentials: 'include',
                                headers: {
                                    'Accept': 'application/json'
                                }
                            });
                            if (!response.ok) {
                                throw new Error(`Lỗi API deadlines: ${response.statusText} (Status: ${response.status})`);
                            }
                            const deadlines = await response.json();
                            const events = deadlines.map(dl => ({
                                title: `${dl.className ? dl.className + ': ' : ''}${dl.topicTitle}: ${dl.title} (Deadline)`,
                                start: dl.dueDate,
                                allDay: true,
                                backgroundColor: dl.status === 'Open' ? '#ff0000' : '#00ff00',
                                borderColor: '#000000',
                                extendedProps: {
                                    time: dl.dueDate ? new Date(dl.dueDate).toLocaleTimeString('en-US', { hour: '2-digit', minute: '2-digit', hour12: true }) : '11:45pm'
                                }
                            }));
                            successCallback(events);
                        } catch (error) {
                            console.error('Lỗi fetch:', error);
                            failureCallback(error);
                            alert('Không thể tải dữ liệu. Kiểm tra console để xem chi tiết lỗi.');
                        }
                    },
                    eventContent: function (arg) {
                        let el = document.createElement('div');
                        el.innerHTML = `
                            <div style="display: flex; align-items: center;">
                                <span style="display: inline-block; width: 10px; height: 10px; background-color: #b3d4fc; border-radius: 2px; margin-right: 5px;"></span>
                                <span>${arg.event.title}</span>
                            </div>
                            <small style="color: gray; font-size: 0.8em;">⏰ ${arg.event.extendedProps.time}</small>
                        `;
                        return { domNodes: [el] };
                    }
                });
                calendar.render();
            } else {
                console.error('Không tìm thấy element #calendar');
            }
        });
    </script>
}