@page
@model Front_end.Pages.Calendar.MyCalenderModel
@{
    ViewData["Title"] = "Lịch Deadline Bài Tập";
    Layout = "~/Pages/Shared/_Sidebar.cshtml"; // Sử dụng layout chung (từ mã thứ hai)
}

<!-- Link CSS riêng cho calendar -->
<link rel="stylesheet" href="~/css/MyCalendar.css" asp-append-version="true" />

<body class="min-h-screen bg-gray-50 flex">

    <!-- Nội dung chính của trang -->
    <main class="flex-1">
        <div class="container mt-5">
            <h2>Lịch Deadline Bài Tập (Người dùng: @Model.UserName)</h2>
            <div id="calendar" class="shadow-lg p-3 mb-5 bg-white rounded"></div>
        </div>
    </main>

    <!-- Scripts -->
    <script src="https://cdn.jsdelivr.net/npm/fullcalendar@6.1.15/index.global.min.js"></script>
    <script>
        async function logout() {
            // Giữ nguyên logout
        }
        document.addEventListener('DOMContentLoaded', function () {
            var calendarEl = document.getElementById('calendar');
            if (calendarEl) {
                var calendar = new FullCalendar.Calendar(calendarEl, {
                    initialView: 'dayGridMonth',
                    initialDate: '2025-01-01',
                    editable: false,
                    headerToolbar: {
                        left: 'prev,next today',
                        center: 'title',
                        right: 'dayGridMonth,timeGridWeek,timeGridDay'
                    },
                    height: 'auto',
                    events: async function (fetchInfo, successCallback, failureCallback) {
                        try {
                            const userId = @Model.UserId; // Lấy từ Model (hoặc localStorage nếu lưu token)
                            const response = await fetch(`https://homework.criticore.edu.vn:8007/api/users/${userId}/deadlines`, {
                                method: 'GET',
                                mode: 'cors',
                                credentials: 'include',
                                headers: {
                                    'Accept': 'application/json'
                                }
                            });
                            if (!response.ok) {
                                throw new Error(`Lỗi API deadlines: ${response.statusText} (Status: ${response.status})`);
                            }
                            const deadlines = await response.json();
                            const events = deadlines.map(dl => ({
                                title: `${dl.className ? dl.className + ': ' : ''}${dl.topicTitle}: ${dl.title} (Deadline)`,
                                start: dl.dueDate,
                                allDay: true,
                                backgroundColor: dl.status === 'Open' ? '#ff0000' : '#00ff00',
                                borderColor: '#000000',
                                extendedProps: {
                                    time: dl.dueDate ? new Date(dl.dueDate).toLocaleTimeString('en-US', { hour: '2-digit', minute: '2-digit', hour12: true }) : '11:45pm'
                                }
                            }));
                            successCallback(events);
                        } catch (error) {
                            console.error('Lỗi fetch:', error);
                            failureCallback(error);
                            alert('Không thể tải dữ liệu. Kiểm tra console để xem chi tiết lỗi.');
                        }
                    },
                    eventContent: function (arg) {
                        let el = document.createElement('div');
                        el.innerHTML = `
                            <div style="display: flex; align-items: center;">
                                <span style="display: inline-block; width: 10px; height: 10px; background-color: #b3d4fc; border-radius: 2px; margin-right: 5px;"></span>
                                <span>${arg.event.title}</span>
                            </div>
                            <small style="color: gray; font-size: 0.8em;">⏰ ${arg.event.extendedProps.time}</small>
                        `;
                        return { domNodes: [el] };
                    }
                });
                calendar.render();
            } else {
                console.error('Không tìm thấy element #calendar');
            }
        });
    </script>
</body>